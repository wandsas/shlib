#!/bin/sh 
# $Id: @(#) /etc/qemu/qemu-vlan                      Exp $
# $A$: (c) 2016 tokiclover <tokiclover@gmail.com>    Exp $
# $L$: MIT (or 2-clause/new/simplified BSD)          Exp $
# $V$: 0.4.0 2018/08/02 21:09:26                     Exp $
#
# Reference:
#    http://www.linux-kvm.org/page/Networking
#    https://en.wikibooks.org/wiki/QEMU/Networking
# Concept:
#    http://wiki.libvirt.org/page/VirtualNetworking
#
# Setup a virtual (private) network which can be used with IPtables and DHCP;
# which means private network are isolated from each other; and then,
# routing is necessary like real LAN network similar to VMware network
# vmnet[0-8]:
#
#   * Adding DNS server for each subnet using dnsmasq DHCP and DNS serer:
#     - add name_servers=172.16.x.1 for persistent configuration in
#       /etc/resolvconf.conf;
#     - add 172.16.x.1 to /etc/resolv.conf to not have to restart dnsmasq;
#     *x* is usually *1i* *i* the virtual network number e.g. 10 for vnet0.
#
#     Use dnsmasq as a DHCP server for virtual network which have access to
#     outside world; or ISC dhcpd for private network by supplying
#     QEMU_VLAN_DHCP="(dnsmask|dhcpd)" command line argument; and then
#     add 172.16.10.1 if vnet0 is configured to run a DNS and DHCP server.
#
#     QEMU_VLAN_DHCP="dhcpcd|dhclient" can be used to start a DHCP client for
#     bridged network to set up a dynamic IP address for the bridge (vnet${i}.)
#
#   * And then setting up iptables rules for internal interfaces and NAT
#     is required as well. See, ~/bin/ipr for a complete statefull firewll
#     setup, e.g. `~/bin/ipr -e eth0 -d -i vnet1,vnet2,vnet3' for exmaple.
#
#   * And finaly use ether=/etc/qemu/vnet${i}/ether.conf hwaddr to provide
#     mac=${ether}_$j to qemu for persistent network and unique hwaddr.
#     Of course, that configuration file--`/etc/qemu/${br}/${br}.conf` can be used
#     to configure the virtual LAN; or extra DHCP server options can be added
#     to ${ether%/*}/dhcp(d).conf for dnsmasq or dhcpcd.
#
#   * Redirect ports for (non bridged) virtual network can be done using
#     iptables's DNAT and SNAT targets. PREROUTING and POSTROUTING chains are supported
#     for VMs are providing web services. The format is as the following:
#
#QEMU_VLAN_PREROUTING_RULSES="interface,proto,port,address:port[/4|6] interface,proto,..."
#QEMU_VLAN_POSTROUTING_RULSES="interface,proto,port,address:port[/4|6] interface,proto,..."
#
# interface   : external network interface to use for external traffic
# proto       : network protocol to use for redirect (tcp, udp,...)
# port        : incoming port on the host machine to use
# address:port: network address and port of the guest to send traffic to
# /4 or /6    : redirect IPv4 or IPv6 traffic (default to IPv4)
#
#    which are translated to the following rules for example:
#
# ${iptables} -A PREROUTING  -t nat -d 192.168.x.y --dport 8080  -j DNAT --to-destination 172.16.u.v:80
# ${iptables} -A POSTROUTING -t nat -s 172.16.u.v  --sport 80    -j SNAT --to-source   192.168.x.y:8080
#
#    `u' is the virtual LAN (`0' for `vnet0', `4' for `vnet4');
#    `v' is the lower address byte of the machine.
#
## Examples:
#
# XXX: NAT virtual network
#
#QEMU_VLAN_NUM="4"
#QEMU_VLAN_DHCP="dnsmasq"
#
#    to setup a virtual LAN with dnsmasq as DHCP and DNS server (4 interfaces)
#    VMs will not be reachable from the outside world unless [DS]SNAT routing
#    is used to redirect ports to VMs for particular services; or else, use a
#    bridged virtual LAN by defining
#
#QEMU_VLAN_IF="eth0"
#
#    argument... and then switch
#    dnsmasq for a DHCP client (dhclient or dhcpcd) instead of a server.
#
# XXX: host-only private network
#
#QEMU_VLAN_NUM="8"
#QEMU_VLAN_DHCP="dhcpd"
#
#    to setup a private LAN with ISC dhcpd as DHCP server (8 interfaces)
#    with no access to outside world; and then use to start VMs:
#
#    `-netdev tap,id=vnet2_1,ifname=vnet2_1,script=no,downscript=no'
#
# XXX: DO NOT USE `-netdev tap,...,fd=$(</sys/class/net/vnet2_1/iflink)'
#      because it does not work at all as normal user or root; use the previous
#      construct instead.
#
# NOTE: No privileged users cannot safely use the first variant without an issue
# because qemu would fail to open `/dev/net/tun'; the second form is problematic
# because the tap device is not connected to the right NIC.
#
# SOLUTION: RUN VMs as SUPERUSER!!
#
# XXX: bridged network
#
#QEMU_VLAN_NUM="8"
#QEMU_VLAN_IF="eth0"
#
#    for a bridged virtual LAN (no need for DHCP server for a bridged setup)
#    and then use: `-netdev bridge,br=vnet2,id=vnet2_4' to start VMs.
#    See `/etc/sysctl.d/10-disable-firewall-on-bridge.conf` if each guest provide
#    a firewall.
#
# XXX: NAT network with VDE switches
#
#QEMU_VLAN_NUM="4"
#QEMU_VLAN_VDE="true"
#QEMU_VLAN_DHCP="dnsmasq"
#
#    to setup a virtual LAN with a VDE switch with a DHCP/DNS server 128 VMs
#    can be connected to vitual LAN with defaults settings; and then use:
#
#   `-netdev vde,id=vnet3_2,sock=/var/run/vnet3_2.vde_switch,group=qemu,mode=660'
#
#    VDE connection sockets are created like `/var/run/vnet3_${i}.vde_switch` for each
#    instance or per tap device; so using any instance is easy and can be scripted.
#
# WARN: Do not forget to use as many `-device e1000,mac=${ether}_2,netdev=vnet2_2'
# as necessary for each NIC, first. Second, append a hardware MAC address for
# each NIC; hardware address can be generated by passing `hwaddr' command,
# and then source `/etc/qemu/${br}/ether.conf'--br being vnet[0-9]?.
#
# Or else, use VDE switches instead which can be used by unprivileged users!
# `-device virtio-net,mac=${ether}_2,id=vnet3_2 -netdev vde,...'
#
# Just do not forget to define QEMU_VLAN_VDE=true argument to attach VDE switches
# to tap network devices. And this has the advantage to multiply the possible network
# port to x32 (unless VDE_SWITCH_ARGS is configured otherwise in the configuration
# /etc/qemu/vnet3/vnet3.conf file, for this example with `vde_switch_args=-n64').
# However defining
#
#QEMU_VLAN_DHCP="dnsmasq"
#QEMU_VLAN_VDE="true"
#QEMU_VLAN_NUM="4"
#
# would provide 32x4=128
# dynamicaly allocated IP address by DHCP server, up to 128+94, 30 are rserved
# for static address. Either, set up DNSMASQ_ARGS in the configuration with
# --dhcp-host=ARG, or use /etc/qemu/vnet3/dhcp.host host file instead.
#
# XXX: Another issue will rise when using DHCP client localy to configure internal
# interface which can grap an interface opened by qemu.
#
# SOLUTION: issue `ifconfig vnet3_$j 0.0.0.0 up' in the host to allow the guest
# to configure the interface with `dhclient|dhcpcd IFACE' in the guest.
#
# Need hardware address for persistent network? Use `hwaddr' service command.
# would generate hardware address (QEMU_VLAN_VDE=true multiply  by 32,
# the default factor is 8.)
# 
# REQUIREMENTS:
#
#   ip [iproute2](https://wiki.linuxfoundation.org/networking/iproute2),
#   ifconfig, sed, md5sum,
#   [vde](http://vde.sourceforge.net/),
#   [dhcpd](http://roy.marples.name/projects/dhcpcd/),
#   [dnsmasq](http://www.thekelleys.org.uk/dnsmasq/doc.html),
#   [dhcpcd](http://www.isc.org/products/DHCP)
#   [iptables](http://www.netfilter.org/projects/iptables/)
#

name="${0##*/}"

usage()
{
	cat <<EOH
usage: $name --br=vnet1 --num=4 [--if=eth0|--dhcp=dnsmasq] [--vde] --(start|stop|macaddr)
  -d, --dhcp=dnsmasq     use DHCP client/server for virtual network/switch
  -i, --if=eth1          hardware interface to use for bridged network
  -b, --br=vnet2         bridge interface to use (default to vnet3)
  -c, --cf=vnet2.conf    configuration file to use (auto generated)
  -n, --num=6            number of tap interface to set up
  -s, --start            start virtual (private) network
  -S, --stop             stop virtual (private) network
  -u, --user=<USER>      user to use for tap interface
  -g, --group=<GROUP>    group to use for tap interface (default to qemu)
  -m, --macaddr          generate hardware address for persistent network
  -v, --vde              attach a VDE switch on each tap network interface
  -h, --help             print help message (README.md or FIRST SCRIPT'S COMMENT)
EOH
	exit ${1:-0}
}
if_usage()
{
	if ! [ ${#} -ge 1 ]; then
		printf "usage: ${name} [--br=br0] [--if=eth0] tap<i> tap<j> ...\n" >&2
		exit 1
	fi
}
error()
{
	echo -e "\e[1;31mERROR:\e[0;36m${name}\e[0m: $@" >&2
}
warn()
{
	echo -e "\e[1;33mWARN:\e[0;32m${name}\e[0m: $@" >&2
}
die()
{
	local ret="${?}"; error "${@}"; exit "${ret}"
}
yesno()
{
	case "${1:-NO}" in
	(0|[Dd][Ii][Ss][Aa][Bb][Ll][Ee]|[Oo][Ff][Ff]|[Ff][Aa][Ll][Ss][Ee]|[Nn][Oo])
		return 1;;
	(1|[Ee][Nn][Aa][Bb][Ll][Ee]|[Oo][Nn]|[Tt][Rr][Uu][Ee]|[Yy][Ee][Ss])
		return 0;;
	(*)
		return 2;;
	esac
}
make_config()
{
	mkdir -p ${cf%/*} || return
	cat <<EOF_CONFIG >${cf}
###### Virtual LAN Configuration #####
#
# Set extra options for dnsmasq when used as DHCP and DNS server
#DNMASQ_ARGS="--dhcp-hostfile=/etc/qemu/${br}/dhcp.host"
#
# Set extra options for ISC dhcpd when used as DHCP server
#DHCPD_ARGS="-q"
#
# Set extra options for vde_switch when using VDE switches
#VDE_SWITCH_ARGS="--numports=64"
#
###### Virtual LAN Configuration #####
#
# The following settings are automatically generated, so modify with care.
# Unless a static address is used for a bridged virtual network, nothing
# should be changed but duplicate hardware address!
#
EOF_CONFIG
}

#
# set sane default
#
:	${QEMU_VLAN_NUM:=4}
yesno "${QEMU_VLAN_VDE}" && QEMU_VLAN_VDE=true || QEMU_VLAN_VDE=false
yesno "${QEMU_VLAN_VIF}" && QEMU_VLAN_VIF=true || QEMU_VLAN_VIF=false
dhcp="${QEMU_VLAN_DHCP}"
cf="${QEMU_VLAN_CF}"
if="${QEMU_VLAN_IF}"
num="${QEMU_VLAN_NUM}"
vde="${QEMU_VLAN_VDE}"
vif="${QEMU_VLAN_VIF}"
user=${USER:=root}
group=${GROUP:=qemu}

[ $# -lt 1 ] && usage 1

write_config=false
args=$(getopt -o b:c,d:i:g:hmn:Ssu:v -l macaddr,br:,cf:,dhcp:,help,if:,num: \
	-l group:,user:,vde,use-vnet,start,stop -n "${name}" -- "${@}")
[ "${?}" = 0 ] || usage 1
eval set -- "${args}"
while [ $# > 0 ]; do
	case "$1" in
		(-b|--br)   br="${2}" n=2;;
		(-c|--cf)   cf="${2}" n=2;;
		(-i|--if)   if="${2}" n=2;;
		(-h|--help) usage 0    ;;
		(-n|--num) num="${2}" n=2;;
		(-d|--dhcp) dhcp="${2}" n=2;;
		(-u|--user)  user="${2}" n=2;;
		(-g|--group) group="${2}" n=2;;
		(-s|--start) action=start n=1;;
		(-S|--stop)  action=stop  n=1;;
		(-m|--macaddr) action=hwaddr n=1;;
		(-v|--vde) vde=true n=1;;
		(--use-vnet) n=1;;
		(*) shift; break;;
	esac
	shift ${n}
done

#
# set sane default
#
if   [ "${name}" = "qemu-ifup"   ]; then
	if_usage "${@}"
	action=ifup num=1 vif=true
:	${tap:=$1}
:	${br:=vnet3}
elif [ "${name}" = "qemu-ifdown" ]; then
	if_usage "${@}"
	action=ifdown num=1 vif=true
:	${tap:=$1}
:	${br:=vnet3}
elif [ -z "${br}" -o -z "${action}" -o -z "${num}" ]; then
	error "usage: ${name} --br=vnet1 --num=4 --dhcp=dnsmasq --vde --(start|stop|addr)"
	exit 1
fi
:	${cf:=/etc/qemu/${br}/${br}.conf}
if [ -s ${cf} ]; then
	write_config=false
	. ${cf}
else
	make_config
	write_config=true
fi

qemu_vlan_make_config()
{
	mkdir -p ${cf%/*} || return
	cat <<EOF_CONFIG >${cf}
###### Virtual LAN Configuration #####
#
# Set extra options for dnsmasq when used as DHCP and DNS server
#DNMASQ_ARGS="--dhcp-hostfile=/etc/qemu/${br}/dhcp.host"
#
# Set extra options for ISC dhcpd when used as DHCP server
#DHCPD_ARGS="-q"
#
# Set extra options for vde_switch when using VDE switches
#VDE_SWITCH_ARGS="--numports=64"
#
###### Virtual LAN Configuration #####
#
# The following settings are automatically generated, so modify with care.
# Unless a static address is used for a bridged virtual network, nothing
# should be changed but duplicate hardware address!
#
EOF_CONFIG
}
iptables_dnat()
{
	[ -n "${2}" ] || return
	${1} -A PREROUTING  -t nat -p "${proto}" -d "${2}" --dport "${port}" -j DNAT \
		--to-destination "${address}"
}
iptables_snat()
{
	[ -n "${2}" ] || return
	${1} -A POSTROUTING -t nat -p "${proto}" -s "${address}" -j SNAT \
		--to-source "${2}:${port}"
}
iptables_table()
{
	local address inet ipt broadcast netmask rule table="${1}" v
	[ ${#} -ge 2 ] && shift || return

	for cmd in iptables ip6tables; do
		eval "${cmd}=$(command -v ${cmd} 2>/dev/null)"
		if [ $? != 0 ]; then
			error "\`${cmd}' command not found"
			return 1
		fi
	done

	for rule; do
		set ${rule/\// }
		rule="${1}" v="${2}"
		case "${v}" in
			(6) ipt=${ip6tables}  ;;
			(*) ipt=${iptables} v=;;
		esac
		set ${rule//,/ }
		if [ ${#} != 4 ]; then
			error "insufficient arguments -- ${rule} (4 required)"
			continue
		fi
		local iface="${1}" proto="${2}" port="$3" address="$4"

		get_ip_address "${iface}" "${v}"
		if [ -n "${v}" ]; then
			iptables_${table} ${ip6tables} "${ipnet6}"
		else
			iptables_${table} ${iptables}  "${ipnet}"
		fi
	done
}
iptables_rules()
{
	local ret=0
	if [ -n "${QEMU_VLAN_PREROUTING_RULES}"  ]; then
		iptables_table "dnat" ${QEMU_VLAN_PREROUTING_RULES}
		ret="${?}"
	fi
	if [ -n "${QEMU_VLAN_POSTROUTING_RULES}" ]; then
		iptables_table "snat" ${QEMU_VLAN_POSTROUTING_RULES}
		ret=$((${ret}+${?}))
	fi
	return ${ret}
}

get_ip_address()
{
	if [ -n "$(${ip} link show "${if}" | ${sed} -n '/RUNNING/p')" ]; then
		eval set -- $(${ifconfig} ${if} | ${sed} -n "/inet${2} /p")
		while [ ${#} -gt 0 ]; do
			eval "${1}=${2}"
			shift 2
		done
	fi
}
qemu_vlan_save_config()
{
	if ${write_config}; then
		printf  "$*\n" >>${cf}
	else
		return 0
	fi
}

qemu_vlan_make_dhcpd_server()
{
	local lf fc
	lf=${cf%/*}/dhcpd.lease
	fc=${cf%/*}/dhcpd.conf

	make_dhcpd_conf
	[ -e ${lf} ] || printf '' >$lf
	[ "${action}" = "config" ] && return

	DHCPD_OPTS="-cf ${fc} -lf ${lf} -pf /var/run/${br}.dhcpd.pid -user dhcp -group dhcp"
	eval dhcpd "${dhcp}_OPTS" "$DHCPD_ARGS" "${br}"
}
qemu_vlan_make_dhcpd_config()
{
	[ -e ${fc} ] && return
	mkdir -p ${lf%/*}
	cat <<EOF >${fc}
###### VNET DHCP Configuration #####

allow unknown-clients;
default-lease-time 7200; 
max-lease-time 72000;

subnet ${p}.0 netmask ${netmask} {
	range ${p}.128 $p.254;
	option broadcast-address ${br}oadcast;
	option domain-name-servers ${address};
	option domain-name localdomain;
	default-lease-time 7200;
	max-lease-time 72000;
	option netbios-name-servers ${address};
	option routers ${address};
}
host ${br} {
	hardware ethernet ${ether};
	fixed-address ${gateway};
	option domain-name-servers 0.0.0.0;
	option domain-name "";
	option routers 0.0.0.0;
}
####### VNET DHCP Configuration #######
EOF
}
qemu_vlan_make_dnsmasq_server()
{
	local df fc lf hf hs
	lf=${cf%/*}/dhcp.lease
	fc=${cf%/*}/dhcp.conf
	hf=${cf%/*}/dhcp.host
	hs=${cf%/*}/hosts
	df=${cf%/*}/dnsmasq.conf
	qemu_vlan_make_dnsmasq_config
	[ "${action}" != "config" ] && return

	DNSMASQ_OPTS="--conf-file=${df} --pid-file=/var/run/${br}.dnsmasq.pid"
	eval ${dnsmasq} "$DNSMASQ_OPTS" "$DNSMASQ_ARGS"
}
qemu_vlan_make_dnsmasq_config()
{
	[ -e ${df} ] && return
	mkdir -p ${cf%/*}

	[ -e ${fc} ] ||
	cat <<EOF >${fc}
###### VNET DHCP Configuration #####
# DHCP options for dnsmasq, modify with care

option:router,0.0.0.0
option:domain-name,localdomain

###### VNET DHCP Configuration #####
EOF

	cat <<EOF >${df}
###### VNET dnsmasq Configuration #####
# DHCP options for dnsmasq, modify with care; see dnsmasq(8)

bind-dynamic
strict-order
except-interface=lo
addn-hosts=${hs}
dhcp-no-override
dhcp-authoritative
dhcp-leasefile=${lf}
dhcp-optsfile=${fc}
dhcp-hostsfile=$hf
dhcp-range=${p}.32,$p.254,${netmask},${br}oadcast,48h
dhcp-optsfile=${fc}
#domain-needed
interface=${br}
listen-address=${gateway}
user=dhcp
group=dhcp

###### VNET dnsmasq Configuration #####
EOF

	[ -e ${hf} ] || printf '' >${hf}
	[ -e ${hs} ] || printf '' >${hs}
}

#
# create mac (hardware) adress using QEMU's registered OUI (52:54:00)
#
qemu_vlan_make_hwaddr()
{
	local a b c i
	if [ -z "${hwaddr}" ]; then
		hwaddr="$(printf "${br}_${1}_$$}\n" | ${md5sum})"
	fi
	shift
	[ -n "${cut}" ] || cut=$(command -v cut 2>/dev/null)

	a="$(printf "${hwaddr}" | ${cut} -b1,2)"
	b="$(printf "${hwaddr}" | ${cut} -b3,4)"
	c="$(printf "${hwaddr}" | ${cut} -b5,6)"
	hwaddr="${hwaddr#$a$b$c}"
	printf "52:54:00:$b:$a:$c"
}
hwaddr()
{
	${vde} && num="$((${num}*32))" || num=$((${num}*8))
	local i=0 f=${cf%/*}/ether.conf
	write_config=true
	cat <<EOF >>$f
##### Hardwre MAC Address #####
# to be used with qemu -device virtio-net,mac=MAC
#
$(eval '
	while [ ${i} -lt ${num} ]; do
		echo ether_${i}=$(qemu_vlan_make_hwaddr ${br}_${i}_ether_$$);
		i=$((${i}+1));
	done
')
#
##### Hardwre MAC Address #####
EOF
}
qemu_vlan_make_bridge()
{
	${ip} link add name ${br} type bridge forward_delay 0 ||
		die "Failed to add \`${br}' bridge device"
	#
	# setup mac address for persistent networking
	#
:	${ether:=$(qemu_vlan_make_hwaddr ${br})}
	${ip} link set dev ${br} address ${ether}
	# 
	# bring up the bridge inet
	#
:	${netmask:=255.255.255.0}
	if [ -n "${if}" ]; then
		get_ip_address "${if}"
		n="10$n" p=192.168
	:	${address:=${inet:-${p}.$n.2}}
 	:	${gateway:=${p}.0.1}
	:	${broadcast:=${p}.0.255}
		case "${dhcp}" in
			(*dhc*)
			${dhcp} ${br}
			sleep 2
			get_ip_address "${br}"
			;;
			(*)
			${ifconfig} ${br} broadcast ${broadcast} ${address}/24 up
			${ip} route add table default ${gateway} dev ${br}
			;;
		esac

		#
		# bridge to hardware interface
		#
		${ip} link set dev ${if} down
		${ifconfig} ${if} up promisc 0.0.0.0/24
		${ip} link set dev ${if} master ${br} ||
			die "Failed to add ${if} to ${br} bridge"
	else
		p="172.16.1$n"
	:	${address:=${p}.2}
	:	${gateway:=${p}.1}
	:	${broadcast:=${p}.255}
		#
		# virtual privalte network
		#
		${ip} addr add ${gateway}/24 broadcast ${broadcast} dev ${br}
		${ip} link set dev ${br} up

		case "${dhcp}" in
			(*dhcpd)
			qemu_vlan_make_dhcpd_server
			;;
			(*dnsmasq)
			qemu_vlan_make_dnsmasq_server
			;;	
		esac
	fi
	qemu_vlan_save_config "netmask=${netmask}\ngateway=${gateway}\nbroadcast=${broadcast}\nether=${ether}\n"
}

config()
{
	write_config=true
	qemu_vlan_make_config
	qemu_vlan_make_dhcpd_server
	qemu_vlan_make_dnsmasq_server
}
ifup()
{
	local tap
	QEMU_VLAN_VIF=true
	start_pre
	for tap; do
		start
	done
}
ifdown()
{
	local tap
	QEMU_VLAN_VIF=true
	start_pre
	for tap; do
		stop
	done
}

stop_pre()
{
	${vde} && vde_switch=vde_switch || vde_switch=
	for cmd in ifconfig ip md5sum sed ${dhcp} ${vde_switch}; do
		eval "${cmd}=$(command -v ${cmd} 2>/dev/null)"
		if [ "${?}" != 0 ]; then
			error "${cmd} required command not found"
			return 3
		fi
	done
}
start_pre()
{
	if [ -z "${br}" -o -z "${num}" ]; then
		error "*** QEMUE_VLAN_NUM=4 ***"
		error "*** [QEMUE_VLAN_DHCP=dnsmasq] ***"
		error "*** and [QEMUE_VLAN_VDE=true] ***"
		error "should be defined in \`${SV_CONFDIR}/${SVC_NAME}' or in \`${SV_CONFLOCAL}/${SVC_NAME}'!!!"
		return 1
	fi
	if ${write_config}; then
		if ! qemu_vlan_make_config; then
			error "Failed to make \`${cf}' configuration file"
			return 2
		fi
	fi

	if ! grep -qsw tun /proc/modules; then
		/sbin/modprobe tun
		/bin/chgrp kvm /dev/net/tun
	fi

	stop_pre || return
	#
	# support br<N>, vmnet<N> vnet<N>... names
	#
	n="$(printf "${br}" | ${sed} -nre 's/.*([0-9].?)/\1/p')"
	if [ -z "${n}" ]; then
		error "*** invalid virtual interface name -- \`${br}' ***"
		error "*** bridge interface should be defined with {br,vnet,vmnet,...} prefix ***"
		return 3
	fi
}

start()
{
	start_pre || return
	${vif} && [ -d /sys/devices/virtual/net/${tap} ] && return 0
	#
	# create the bridge between ${if} and the tap device
	#
	if ! ${ip} link set "${br}" up >/dev/null 2>&1; then
		if ! qemu_vlan_make_bridge; then
			error "Failed to make \`${br}' bridge!"
			return 1
		fi
	fi

	local address i=0 tap_opts 
	if [ -n "${if}" -o -n "$(${ip} link show dev ${br} | ${sed} -n '/PROMISC/p')" ]; then
		tap_opts='promisc on'
	fi

	while [ ${i} -lt ${num} ]; do
		${vif} || tap="${br}_${i}"
		#
		# bring up the tap interface
		#
		${ip} tuntap add dev "${tap}" mode tap user "${user}" group "${group}" ||
			{ error "Failed to create ${tap} device"; return 1; }

		${ip} link set dev "${tap}" ${tap_opts} master "${br}" up ||
			{ error "Failed to bridge ${tap} to ${br}"; return 1; }

		#
		# use a vde switch if enabled
		#
		if ${vde}; then
			${vif} && warn "QEMU_VLAN_VDE is active for this bridge!"
			eval ether="\$vde_switch_ether_${i}"
			if [ -z "${ether}" ]; then
		:	${write_config:=true}
		:	${ether:=$(qemu_vlan_make_hwaddr ${tap})}
			qemu_vlan_save_config "vde_switch_ether_${i}=${ether}"
			fi
			${vde_switch} ${VDE_SWITCH_ARGS} --mode 660 --tap "${tap}" \
				--sock /var/run/${tap}.vde_switch -g "${group}" --daemon \
				--pidfile /var/run/${tap}.vde_switch.pid --macaddr "${ether}" ||
				{ error "Failed to connect \`${tap}' interface to VDE switch"; return 1; }
		fi

		${vif} && return 0
		i=$((${i}+1))
		write_config=
	done
}
stop()
{
	stop_pre || return
	local i=0 ppidfile
	while [ ${i} -lt ${num} ]; do
		${vif} || tap="${br}_${i}"
		#
		# remove vde switch
		#
		pidfile=/var/run/${tap}.vde_switch.pid
		if ${vde} && [ -e ${pidfile} ]; then
			${vif} && warn "QEMU_VLAN_VDE is active for this bridge!"
			if pkill -TERM -x "vde_switch" -F ${pidfile}; then
				rm -f ${pidfile}
			fi
		fi

		${ip} link set dev "${tap}" down
		${ip} link del dev "${tap}"
		${vif} && return 0
		i=$((${i}+1))
	done

	# 
	# Delete the bridge
	#
	${ip} link set dev "${br}" down
	${ip} link del dev "${br}"
	pidfile=/var/run/${br}.${dhcp}.pid
	if [ -n "${dhcp}" -a -e ${pidfile} ]; then
		pkill -TERM -x "${dhcp}" -F ${pidfile}
	fi
	if [ -n "${if}" ]; then
		${ip} link set dev "${if}" down promisc off
		${ifconfig} "${if}" up 0.0.0.0/24
	fi
}

eval "${action}" "${@}"
